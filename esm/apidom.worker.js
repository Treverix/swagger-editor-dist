import*as e from"monaco-editor/esm/vs/editor/editor.worker.js";import*as t from"vscode-languageserver-textdocument";import*as o from"@swagger-api/apidom-ls";var r={d:(e,t)=>{for(var o in t)r.o(t,o)&&!r.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)},i={};r.d(i,{M$:()=>c,Ue:()=>u,j2:()=>n.initialize,Yw:()=>g});const n=(e=>{var t={};return r.d(t,e),t})({initialize:()=>e.initialize});const a=t;const s=o;class c{constructor(e,t){this._ctx=e,this._createData=t,this._languageService=s.getLanguageService(this.constructor.apiDOMContext)}async doValidation(e){const t=this._getTextDocument(e);return t?this._languageService.doValidation(t):[]}async doComplete(e,t){const o=this._getTextDocument(e);return o?this._languageService.doCompletion(o,t):[]}async doHover(e,t){const o=this._getTextDocument(e);return o?this._languageService.doHover(o,t):[]}async doLinks(e){const t=this._getTextDocument(e);return t?this._languageService.doLinks(t):[]}async findDocumentSymbols(e){const t=this._getTextDocument(e);return t?this._languageService.doFindDocumentSymbols(t):[]}async provideDefinition(e,t){const o=this._getTextDocument(e);return o?this._languageService.doProvideDefinition(o,{uri:e,position:t}):[]}async doCodeActions(e,t){const o=this._getTextDocument(e);return o?this._languageService.doCodeActions(o,t):[]}async findSemanticTokens(e){const t=this._getTextDocument(e);return t?this._languageService.computeSemanticTokens(t):[]}async getSemanticTokensLegend(){return this._languageService.getSemanticTokensLegend()}_getTextDocument(e){const t=this._ctx.getMirrorModels()[0];return a.TextDocument.create(e,this._createData.languageId,t._versionId,t.getValue())}}c.apiDOMContext={validatorProviders:[],completionProviders:[],performanceLogs:!1,logLevel:s.LogLevel.WARN,defaultLanguageContent:{namespace:"asyncapi"}};const g=e=>(t,o)=>{let r=e;if(o.customWorkerPath)if("undefined"===typeof globalThis.importScripts)console.warn("Monaco is not using webworkers for background tasks, and that is needed to support the customWorkerPath flag");else{Array.isArray(o.customWorkerPath)?globalThis.importScripts(...o.customWorkerPath):globalThis.importScripts(o.customWorkerPath);const{customApiDOMWorkerFactory:e}=globalThis;if("function"!==typeof e)throw new Error(`The script at ${o.customWorkerPath} does not add customApiDOMWorkerFactory to globalThis`);r=e(r,{apidomLS:s,vscodeLanguageServerTextDocument:a})}return new r(t,o)},u=g(c);globalThis.onmessage=()=>{(0,n.initialize)(((e,t)=>u(e,t)))};var l=i.M$,d=i.Ue,m=i.j2,h=i.Yw;export{l as ApiDOMWorker,d as create,m as initialize,h as makeCreate};
//# sourceMappingURL=apidom.worker.js.map